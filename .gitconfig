[push]
	default = simple
# I am experimenting with this. (June 29, 2021) Supposedly it can be more convenient. But time will tell if it causes issues or not.
[pull]
	rebase = true
# Force SSH to be used instead of HTTPS
[url "ssh://git@github.com/"]
	insteadOf = https://github.com/
[url "ssh://git@gitlab.com/"]
	insteadOf = https://gitlab.com/
[url "ssh://git@bitbucket.org/"]
	insteadOf = https://bitbucket.org/
# *re*cord merge solutions and *re*apply them if the same merge conflict *re*occurs
[rerere]
	enabled = true
# Attempt to colorize output
[color]
	ui = auto
# For example, use `git unstage` instead of `git reset HEAD --`
[alias]
	currentbranch = !(git branch --show-current) 2>/dev/null
	currentb = !git currentbranch
	defaultbranch = !(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@') 2>/dev/null
	defaultb = !git defaultbranch
	mainbranch = !git defaultbranch
	mainb = !git defaultbranch
	unstage = reset HEAD --
	visual = !gitk
	visual2 = !git log --graph --oneline --decorate --all branch-name~1..
	newb = !git checkout $(git defaultbranch) && git pull origin $(git defaultbranch) && git checkout -b
	pulll = !git pull origin $(git currentbranch)
	pushh = !(git pull origin $(git currentbranch) || true) && git push origin HEAD
	mergee = !topic_branch=$(git currentbranch) && git checkout $(git defaultbranch) && git pull origin $(git defaultbranch) && git checkout $topic_branch && git merge $(git defaultbranch)
	checkoutmainb = !git checkout $(git defaultbranch)
	checkoutt = "!f() { \
		git fetch origin \"$1\"; \
		git checkout \"$1\"; \
	}; f"
	d = "!f() { \
		git diff \"$@\"; \
		git status; \
	}; f"
	a = "!f() { \
		git add \"$@\"; \
		git status; \
	}; f"
	aa = !git add --all && git status
	c = commit
	s = status
	# testing to see if i can make aliases of aliases, and things like that...
	testf = "!f() { \
		echo 'ran testf'; \
	}; f"
	test1 = pushh
	test2 = !git pushh
[init]
	defaultBranch = main
# experimenting with this. this should cause git pull to automatically pull submodules also, but it DOES NOT do so for git clone nor for git checkout.i
# so you must manually run:
# git submodule update --init --recursive
[submodule]
	recurse = true
[advice]
	addIgnoredFile = false
# import the computer's local global gitconfig file, which can override settings for the particular computer
[include]
	path = ~/.gitconfig_local
